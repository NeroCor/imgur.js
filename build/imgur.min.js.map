{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","_","request","this","utils_js__utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","utils_js","_imgurAPICall__imgurAPICall","options","forEach","option","Error","body","authToken","join","send","set","promise","_imgurAPICall","_endpoint__endpoint","imgurAPICall","bind","_endpoint","imageEndpoint","get","hash","oauth2Endpoint","responseType","resType","queryString","authenticate","username","password","extend","grant_type","response_type","refresh","refreshToken","clientSecret","topicsEndpoint","topicId","sort","undefined","arguments","page","requestPath","_imgur__Imgur","clientKey","endpoints","image","oauth2","topics","value","key","_imgur"],"mappings":"CAAA,SAAWA,EAAQC,GACI,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,UAAWA,QAAQ,gCACjG,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,SAAU,+BAAgCJ,GAC/FD,EAAOO,MAAQN,EAAQD,EAAOQ,EAAGR,EAAOS,UAC1CC,KAAM,SAAUF,EAAGC,GAAW,YAE5B,IAAIE,IACAC,QAAU,wBACVC,YAAa,IACbC,UAAW,GACXC,aAAc,SAASC,EAAQC,EAAMC,GACjC,OAASF,OAAAA,EAAQC,KAAAA,EAAMC,OAAAA,KAI3BC,EAAWR,EAEXS,EAA8B,SAASC,IACtC,SAAU,SAAU,QAAQC,QAAQ,SAAAC,GACjC,IAAIF,EAAQE,GACR,KAAM,IAAIC,OAAMD,EAAS,uBAGjC,IAAIE,GAAOJ,EAAQI,SACbC,EAAY,aAAeP,EAASL,SAC1C,OAAOL,GAAQY,EAAQH,SAASG,EAAQL,OAAQK,EAAQJ,MAAMU,KAAK,MAC9DC,KAAKH,GACLI,IAAI,gBAAiBH,GACrBI,WAGLC,EAAgBX,EAEhBY,EAAsB,SAAAX,GAGtB,MAFAA,GAAQY,aAAezB,EAAE0B,KAAKH,EAAeV,GAC7CA,EAAQL,OAASK,EAAQL,SAAWG,EAASP,QAASO,EAASN,aAAac,KAAK,KAC1EN,GAGPc,EAAYH,EAEZI,EAAgBD,GAChBlB,KAAM,QACND,QAASG,EAASP,QAASO,EAASN,aAAac,KAAK,KACtDU,IAAG,SAACC,GACA,GAAMjB,GAAUF,EAASJ,aAAaL,KAAKM,QAASN,KAAKO,KAAMqB,GAAMX,KAAK,KAAM,MAChF,OAAOjB,MAAKuB,aAAaZ,MAI7BkB,EAAiBJ,GACjBlB,KAAM,SACND,OAAQG,EAASP,QACjByB,IAAG,SAACG,GACA,GAAMC,GAAWD,GAAgB,QAC3BE,EAAc,KAAM,iBACLD,EAAO,aACXtB,EAASL,WAC5Ba,KAAK,KAEGV,GAAQP,KAAKO,KAAM,aAAaU,KAAK,KAAOe,EAC5CrB,EAAUF,EAASJ,aAAaL,KAAKM,OAAQC,EAAM,MAEzD,OAAOP,MAAKuB,aAAaZ,IAE7BsB,aAAY,SAACC,EAAUC,GACnB,IAAID,IAAaC,EACb,KAAM,IAAIrB,OAAM,8CAEpB,IAAMP,GAAO,gBACPI,EAAUb,EAAEsC,OAAO3B,EAASJ,aAAaL,KAAKM,OAAQC,EAAM,SAC9DQ,MACImB,SAAAA,EACAC,SAAAA,EACAE,WAAc,WACdC,cAAiB,UAIzB,OAAOtC,MAAKuB,aAAaZ,IAE7B4B,QAAO,SAACC,EAAcC,GAClB,GAAMT,GAAc,KAAM,iBACLQ,EAAY,aAChB/B,EAASL,UAAS,iBACdqC,EACjB,4BACFxB,KAAK,KAEDV,GAAQP,KAAKO,KAAM,SAASU,KAAK,KAAOe,EACxCrB,EAAUF,EAASJ,aAAaL,KAAKM,OAAQC,EAAM,OAEzD,OAAOP,MAAKuB,aAAaZ,MAK7B+B,EAAiBjB,GACjBlB,KAAM,SACND,QAASG,EAASP,QAASO,EAASN,aAAac,KAAK,KACtDU,IAAG,SAACgB,GCbA,GDaSC,GAAIC,SAAAC,UAAA,GAAC,QAAOA,UAAA,GAAEC,EAAIF,SAAAC,UAAA,GAAC,EAACA,UAAA,GACvBE,GAAehD,KAAKO,KAAMoC,EAASC,EAAMG,GAAM9B,KAAK,KACpDN,EAAUF,EAASJ,aAAaL,KAAKM,OAAQ0C,EAAa,MAChE,OAAOhD,MAAKuB,aAAaZ,MAI7BsC,EAAgB,SAAAC,GAChB,IAAIA,EAAa,KAAM,IAAIpC,OAAM,iDACjC,IAAIqC,IACAC,MAAQ1B,EACR2B,OAAQxB,EACRyB,OAAQZ,EAGZjC,GAASL,UAAY8C,CAErB,IAAIrD,IACA0B,aAAeF,EASnB,OANAxB,GAAMO,UAAY8C,EAElBpD,EAAEc,QAAQuC,EAAW,SAASI,EAAOC,GACjC3D,EAAM2D,GAAOD,IAGV1D,GAGP4D,EAASR,CAEb,OAAOQ","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('superagent-bluebird-promise')) :\n    typeof define === 'function' && define.amd ? define(['lodash', 'superagent-bluebird-promise'], factory) :\n    global.imgur = factory(global._, global.request)\n}(this, function (_, request) { 'use strict';\n\n    let utils_js__utils = {\n        API_URL : 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: '',\n        buildOptions: function(apiUrl, path, method) {\n            return { apiUrl, path, method };\n        }\n    };\n\n    var utils_js = utils_js__utils;\n\n    let _imgurAPICall__imgurAPICall = function(options) {\n        ['method', 'apiUrl', 'path'].forEach(option => {\n            if(!options[option]) {\n                throw new Error(option + ' must be specified');\n            }\n        });\n        let body = options.body || {};\n        const authToken = 'Client-ID ' + utils_js.CLIENT_ID;\n        return request[options.method]([options.apiUrl, options.path].join('/'))\n            .send(body)\n            .set('Authorization', authToken)\n            .promise();\n    };\n\n    var _imgurAPICall = _imgurAPICall__imgurAPICall;\n\n    let _endpoint__endpoint = options => {\n        options.imgurAPICall = _.bind(_imgurAPICall, options);\n        options.apiUrl = options.apiUrl || [utils_js.API_URL, utils_js.API_VERSION].join('/');\n        return options;\n    };\n\n    var _endpoint = _endpoint__endpoint;\n\n    var imageEndpoint = _endpoint({\n        path: 'image',\n        apiUrl: [utils_js.API_URL, utils_js.API_VERSION].join('/'),\n        get(hash) {\n            const options = utils_js.buildOptions(this.apiUrl, [this.path, hash].join('/'), 'get');\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var oauth2Endpoint = _endpoint({\n        path: 'oauth2',\n        apiUrl: utils_js.API_URL,\n        get(responseType) {\n            const resType = (responseType || 'token');\n            const queryString = '?' + [\n                `response_type=${resType}`,\n                `client_id=${utils_js.CLIENT_ID}`\n        ].join('&');\n\n            const path = [this.path, 'authorize'].join('/') + queryString;\n            const options = utils_js.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        authenticate(username, password) {\n            if(!username || !password) {\n                throw new Error('Username and password required authenticate');\n            }\n            const path = 'generatetoken';\n            const options = _.extend(utils_js.buildOptions(this.apiUrl, path, 'post'), {\n                body: {\n                    username,\n                    password,\n                    'grant_type': 'password',\n                    'response_type': 'token'\n                }\n            });\n\n            return this.imgurAPICall(options);\n        },\n        refresh(refreshToken, clientSecret) {\n            const queryString = '?' + [\n                `refresh_token=${refreshToken}`,\n                `client_id=${utils_js.CLIENT_ID}`,\n                `client_secret=${clientSecret}`,\n                'grant_type=refresh_token'\n            ].join('&');\n\n            const path = [this.path, 'token'].join('/') + queryString;\n            const options = utils_js.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n\n    });\n\n    var topicsEndpoint = _endpoint({\n        path: 'topics',\n        apiUrl: [utils_js.API_URL, utils_js.API_VERSION].join('/'),\n        get(topicId, sort='viral', page=0) {\n            const requestPath = [this.path, topicId, sort, page].join('/');\n            const options = utils_js.buildOptions(this.apiUrl, requestPath, 'get');\n            return this.imgurAPICall(options);\n        }\n    });\n\n    let _imgur__Imgur = clientKey => {\n        if(!clientKey) { throw new Error('Client Key required to initialize imgur client');}\n        let endpoints = {\n            image : imageEndpoint,\n            oauth2: oauth2Endpoint,\n            topics: topicsEndpoint\n        };\n\n        utils_js.CLIENT_ID = clientKey;\n\n        let imgur = {\n            imgurAPICall : _imgurAPICall\n        };\n\n        imgur.CLIENT_ID = clientKey;\n\n        _.forEach(endpoints, function(value, key) {\n            imgur[key] = value;\n        });\n\n        return imgur;\n    };\n\n    var _imgur = _imgur__Imgur;\n\n    return _imgur;\n\n}));\n",null],"sourceRoot":"/source/"}