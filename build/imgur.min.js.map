{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","request","_","this","utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","body","undefined","arguments","bearer","imgurAPICall","options","forEach","option","Error","authToken","BEARER","send","set","promise","endpoint","bind","imageEndpoint","get","hash","oauth2Endpoint","responseType","resType","queryString","join","refresh","refreshToken","clientSecret","topicsEndpoint","topicId","sort","page","requestPath","getDefaults","postOptions","galleryPostEndpoint","extend","report","reason","comments","galleryEndpoint","section","showViral","post","commentEndpoint","downvote","commentId","upvote","deleteComment","clientKey","setUtil","key","value","getUtil","image","oauth2","topics","gallery","comment"],"mappings":"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","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent-bluebird-promise'), require('lodash')) :\n    typeof define === 'function' && define.amd ? define(['superagent-bluebird-promise', 'lodash'], factory) :\n    global.imgur = factory(global.request, global._)\n}(this, function (request, _) { 'use strict';\n\n    var utils = {\n        API_URL: 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: '',\n        buildOptions: (apiUrl, path, method, body = {}) => {\n            return { apiUrl, path, method, body };\n        },\n        bearer: ''\n    };\n\n    var imgurAPICall = function(options) {\n        ['method', 'apiUrl', 'path'].forEach(option => {\n            if (!options[option]) {\n                throw new Error(`${option} must be specified`);\n            }\n        });\n\n        let authToken = `Client-ID ${utils.CLIENT_ID}`;\n        const body = options.body || {};\n\n        if(utils.BEARER) {\n            authToken = `Bearer ${utils.BEARER}`;\n        }\n\n        return request[options.method](`${options.apiUrl}/${options.path}`)\n            .send(body)\n            .set('Authorization', authToken)\n            .promise();\n    };\n\n    var endpoint = function(options) {\n        options.imgurAPICall = _.bind(imgurAPICall, options);\n        options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\n\n        return options;\n    }\n\n    var imageEndpoint = endpoint({\n        path: 'image',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n        get(hash) {\n            const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var oauth2Endpoint = endpoint({\n        path: 'oauth2',\n        apiUrl: utils.API_URL,\n        get(responseType) {\n            const resType = responseType || 'token';\n            const queryString = '?' + [\n                `response_type=${resType}`,\n                `client_id=${utils.CLIENT_ID}`\n        ].join('&');\n\n            const path = `${this.path}/authorize${queryString}`;\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        refresh(refreshToken, clientSecret) {\n            const queryString = '?' + [\n                `refresh_token=${refreshToken}`,\n                `client_id=${utils.CLIENT_ID}`,\n                `client_secret=${clientSecret}`,\n                'grant_type=refresh_token'\n            ].join('&');\n\n            const path = `${this.path}/token${queryString}`;\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var topicsEndpoint = endpoint({\n        path: 'topics',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n        get(topicId, sort='viral', page=0) {\n            const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        getDefaults() {\n            const requestPath = `${this.path}/defaults`;\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    const postOptions = {\n        path: 'gallery',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\n};\n\n    var galleryPostEndpoint = endpoint(_.extend({}, postOptions, {\n        get(hash) {\n            const path = `${this.path}/${hash}`;\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        report(hash, reason) {\n            const path = `${this.path}/${hash}/report`;\n            const options = utils.buildOptions(this.apiUrl, path, 'post', {reason: reason});\n\n            return this.imgurAPICall(options);\n        },\n        comments: endpoint(_.extend({}, postOptions, {\n            get(hash, sort='best') {\n                const path = `${this.path}/${hash}/comments/${sort}`;\n                const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n                return this.imgurAPICall(options);\n            }\n        }))\n    }));\n\n    var galleryEndpoint = endpoint({\n        path: 'gallery',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n        get(section='hot', sort='viral', page=0, showViral=true) {\n            const requestPath = `${this.path}/${section}/${sort}/${page}?showViral=${showViral}`;\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        post: galleryPostEndpoint\n    });\n\n    var commentEndpoint = endpoint({\n        path: 'comment',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n        downvote(commentId) {\n            const path = `${this.path}/${commentId}/vote/down`;\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n        upvote(commentId) {\n            const path = `${this.path}/${commentId}/vote/up`;\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n        report(commentId, reason) {\n            const path = `${this.path}/${commentId}/report`;\n            const options = utils.buildOptions(this.apiUrl, path, 'post', {reason: reason});\n\n            return this.imgurAPICall(options);\n        },\n        deleteComment(commentId) {\n            const path = `${this.path}/${commentId}`;\n            const options = utils.buildOptions(this.apiUrl, path, 'delete');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var imgur = function(clientKey) {\n        let setUtil = function(key, value) {\n            utils[key] = value;\n        };\n\n        let getUtil = function(key) {\n            return utils[key];\n        };\n\n        if (!clientKey) {\n            throw new Error('Client Key required to initialize imgur client');\n        }\n\n        setUtil('CLIENT_ID', clientKey);\n\n        return {\n            imgurAPICall,\n            CLIENT_ID: clientKey,\n            image: imageEndpoint,\n            oauth2: oauth2Endpoint,\n            topics: topicsEndpoint,\n            gallery: galleryEndpoint,\n            comment: commentEndpoint,\n            setUtil,\n            getUtil\n        };\n    }\n\n    return imgur;\n\n}));\n",null],"sourceRoot":"/source/"}