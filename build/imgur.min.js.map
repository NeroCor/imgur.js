{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","request","this","extend","key","obj","i","result","arguments","length","hasOwnProperty","galleryEndpoint","windowType","endpoint","path","apiUrl","utils","API_URL","API_VERSION","get","topic","sort","page","window","undefined","requestPath","options","buildOptions","imgurAPICall","post","galleryPostEndpoint","CLIENT_ID","method","body","bearer","additionalHeaders","forEach","option","Error","authToken","send","set","promise","_endpoint","bind","imageEndpoint","hash","albumEndpoint","oauth2Endpoint","responseType","resType","queryString","join","refresh","refreshToken","clientSecret","topicsEndpoint","topicId","getDefaults","postOptions","REASON_DOES_NOT_BELONG_ON_IMGUR","report","reason","_handleVote","voteType","upvote","downvote","favorite","isAlbum","postType","comments","gallery","section","showViral","WEEK","ALL","subreddit","tag","search","commentEndpoint","commentId","deleteComment","submitComment","params","console","log","submitReply","clientKey","bearerKey","setUtil","value","getUtil","image","album","oauth2","topics","comment"],"mappings":"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","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent-bluebird-promise')) :\n  typeof define === 'function' && define.amd ? define(['superagent-bluebird-promise'], factory) :\n  global.imgur = factory(global.request)\n}(this, function (request) { 'use strict';\n\n  var utils = {\n      API_URL: 'https://api.imgur.com',\n      API_VERSION: '3',\n      CLIENT_ID: '',\n      buildOptions: (apiUrl, path, method, body = {}) => {\n          return { apiUrl, path, method, body };\n      },\n      bearer: '',\n      additionalHeaders: {}\n  };\n\n  var imgurAPICall = function(options) {\n      ['method', 'apiUrl', 'path', 'body'].forEach(option => {\n          if (!options[option]) {\n              throw new Error(`${option} must be specified`);\n          }\n      });\n\n      let authToken = `Client-ID ${utils.CLIENT_ID}`;\n\n      if(utils.bearer) {\n          authToken = `Bearer ${utils.bearer}`;\n      }\n\n      return request[options.method](`${options.apiUrl}/${options.path}`)\n          .send(options.body)\n          .set('Authorization', authToken)\n          .set(utils.additionalHeaders)\n          .promise();\n  };\n\n  var _endpoint = function(options) {\n      options.imgurAPICall = imgurAPICall.bind(options);\n      options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\n\n      return options;\n  }\n\n  var imageEndpoint = _endpoint({\n      path: 'image',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(hash) {\n          const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var albumEndpoint = _endpoint({\n      path: 'album',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(hash) {\n          const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var oauth2Endpoint = _endpoint({\n      path: 'oauth2',\n      apiUrl: utils.API_URL,\n      get(responseType) {\n          const resType = responseType || 'token';\n          const queryString = '?' + [\n              `response_type=${resType}`,\n              `client_id=${utils.CLIENT_ID}`\n        ].join('&');\n\n          const path = `${this.path}/authorize${queryString}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      refresh(refreshToken, clientSecret) {\n          const queryString = '?' + [\n              `refresh_token=${refreshToken}`,\n              `client_id=${utils.CLIENT_ID}`,\n              `client_secret=${clientSecret}`,\n              'grant_type=refresh_token'\n          ].join('&');\n\n          const path = `${this.path}/token${queryString}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var topicsEndpoint = _endpoint({\n      path: 'topics',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(topicId, sort='viral', page=0) {\n          const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      getDefaults() {\n          const requestPath = `${this.path}/defaults`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  const postOptions = {\n      path: 'gallery',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\n};\n\n  function extend() {\n    var key, obj, result = {}, i;\n    for (i = 0; i <= arguments.length; i++) {\n      obj = arguments[i];\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          result[key] = obj[key];\n        } else {\n        }\n      }\n    }\n    return result;\n  }\n\n  var galleryPostEndpoint = _endpoint(extend({}, postOptions, {\n      REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n      get(hash) {\n          const path = `${this.path}/${hash}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      report(hash, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          if(typeof reason !== 'number') {\n              throw new Error('the reason must be an integer');\n          }\n\n          const path = `${this.path}/${hash}/report`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\n\n          return this.imgurAPICall(options);\n      },\n      _handleVote(hash, voteType) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          const path = `${this.path}/${hash}/vote/${voteType}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      upvote(hash) {\n          return this._handleVote(hash, 'up');\n      },\n      downvote(hash) {\n          return this._handleVote(hash, 'down');\n      },\n      favorite(hash, isAlbum) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          if(isAlbum === undefined || typeof(isAlbum) !== 'boolean') {\n              throw new Error('isAlbum with type boolean must be specified');\n          }\n\n          const postType = isAlbum ? 'album' : 'image';\n          //doesn't use gallery path because it could be a non gallery item\n          const path = `${postType}/${hash}/favorite`;\n          const options =  utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      comments: _endpoint(extend({}, postOptions, {\n          get(hash, sort='best') {\n              const path = `${this.path}/${hash}/comments/${sort}`;\n              const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n              return this.imgurAPICall(options);\n          }\n      }))\n  }));\n\n  const gallery = _endpoint({\n      path: 'gallery',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(section='hot', sort='viral', page=0, showViral=true) {\n          const requestPath = `${this.path}/${section}/${sort}/${page}?showViral=${showViral}`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      post: galleryPostEndpoint\n  });\n\n  function galleryEndpoint(windowType, endpoint) {\n      return {\n          path: `gallery/${endpoint}`,\n          apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n          get(topic, sort, page, window = windowType) {\n              const requestPath = `${this.path}/${topic}/${sort}/${window}/${page}`;\n              const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n              return this.imgurAPICall(options);\n          },\n          post: galleryPostEndpoint,\n      };\n  }\n\n  const WEEK = 'week';\n  const ALL = 'all';\n  const subreddit = _endpoint(galleryEndpoint(WEEK, 'r'));\n  const tag = _endpoint(galleryEndpoint(WEEK, 't'));\n  const search = _endpoint(galleryEndpoint(ALL, 'search'));\n  const topic = _endpoint(galleryEndpoint(ALL, 'topic'));\n\n  var commentEndpoint = _endpoint({\n      path: 'comment',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n      get(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      downvote(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}/vote/down`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      upvote(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}/vote/up`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      report(commentId, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          if(typeof reason !== 'number') {\n              throw new Error('the reason must be an integer');\n          }\n\n          const path = `${this.path}/${commentId}/report`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\n\n          return this.imgurAPICall(options);\n      },\n      deleteComment(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'del');\n\n          return this.imgurAPICall(options);\n      },\n      submitComment(params) {\n          ['image_id', 'comment'].forEach(option => {\n              console.log(!params[option]);\n              if (!params[option]) {\n                  throw new Error(`${option} must be specified`);\n              }\n          });\n\n          const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n          return this.imgurAPICall(options);\n      },\n      submitReply(params) {\n          ['image_id', 'comment', 'parent_id'].forEach(option => {\n              if (!params[option]) {\n                  throw new Error(`${option} must be specified`);\n              }\n          });\n\n          const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var imgur = function(clientKey, bearerKey) {\n      let setUtil = function(key, value) {\n          utils[key] = value;\n      };\n\n      let getUtil = function(key) {\n          return utils[key];\n      };\n\n      if (!clientKey) {\n          throw new Error('Client Key required to initialize imgur client');\n      }\n\n      setUtil('CLIENT_ID', clientKey);\n\n      if(bearerKey) {\n          setUtil('bearer', bearerKey);\n      }\n\n      return {\n          imgurAPICall,\n          CLIENT_ID: clientKey,\n          image: imageEndpoint,\n          album: albumEndpoint,\n          oauth2: oauth2Endpoint,\n          topics: topicsEndpoint,\n          gallery,\n          subreddit,\n          tag,\n          search,\n          topic,\n          comment: commentEndpoint,\n          setUtil,\n          getUtil\n      };\n  }\n\n  return imgur;\n\n}));\n//# sourceMappingURL=./imgur.js.map","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent-bluebird-promise')) : typeof define === 'function' && define.amd ? define(['superagent-bluebird-promise'], factory) : global.imgur = factory(global.request);\n})(this, function (request) {\n    'use strict';\n\n    var utils = {\n        API_URL: 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: '',\n        buildOptions: function buildOptions(apiUrl, path, method) {\n            var body = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n            return { apiUrl: apiUrl, path: path, method: method, body: body };\n        },\n        bearer: '',\n        additionalHeaders: {}\n    };\n\n    var imgurAPICall = function imgurAPICall(options) {\n        ['method', 'apiUrl', 'path', 'body'].forEach(function (option) {\n            if (!options[option]) {\n                throw new Error(option + ' must be specified');\n            }\n        });\n\n        var authToken = 'Client-ID ' + utils.CLIENT_ID;\n\n        if (utils.bearer) {\n            authToken = 'Bearer ' + utils.bearer;\n        }\n\n        return request[options.method](options.apiUrl + '/' + options.path).send(options.body).set('Authorization', authToken).set(utils.additionalHeaders).promise();\n    };\n\n    var _endpoint = function _endpoint(options) {\n        options.imgurAPICall = imgurAPICall.bind(options);\n        options.apiUrl = options.apiUrl || utils.API_URL + '/' + utils.API_VERSION;\n\n        return options;\n    };\n\n    var imageEndpoint = _endpoint({\n        path: 'image',\n        apiUrl: utils.API_URL + '/' + utils.API_VERSION,\n        get: function get(hash) {\n            var options = utils.buildOptions(this.apiUrl, this.path + '/' + hash, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var albumEndpoint = _endpoint({\n        path: 'album',\n        apiUrl: utils.API_URL + '/' + utils.API_VERSION,\n        get: function get(hash) {\n            var options = utils.buildOptions(this.apiUrl, this.path + '/' + hash, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var oauth2Endpoint = _endpoint({\n        path: 'oauth2',\n        apiUrl: utils.API_URL,\n        get: function get(responseType) {\n            var resType = responseType || 'token';\n            var queryString = '?' + ['response_type=' + resType, 'client_id=' + utils.CLIENT_ID].join('&');\n\n            var path = this.path + '/authorize' + queryString;\n            var options = utils.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        refresh: function refresh(refreshToken, clientSecret) {\n            var queryString = '?' + ['refresh_token=' + refreshToken, 'client_id=' + utils.CLIENT_ID, 'client_secret=' + clientSecret, 'grant_type=refresh_token'].join('&');\n\n            var path = this.path + '/token' + queryString;\n            var options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var topicsEndpoint = _endpoint({\n        path: 'topics',\n        apiUrl: utils.API_URL + '/' + utils.API_VERSION,\n        get: function get(topicId) {\n            var sort = arguments.length <= 1 || arguments[1] === undefined ? 'viral' : arguments[1];\n            var page = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n            var requestPath = this.path + '/' + topicId + '/' + sort + '/' + page;\n            var options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        getDefaults: function getDefaults() {\n            var requestPath = this.path + '/defaults';\n            var options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var postOptions = {\n        path: 'gallery',\n        apiUrl: utils.API_URL + '/' + utils.API_VERSION\n    };\n\n    function extend() {\n        var key,\n            obj,\n            result = {},\n            i;\n        for (i = 0; i <= arguments.length; i++) {\n            obj = arguments[i];\n            for (key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    result[key] = obj[key];\n                } else {}\n            }\n        }\n        return result;\n    }\n\n    var galleryPostEndpoint = _endpoint(extend({}, postOptions, {\n        REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n        get: function get(hash) {\n            var path = this.path + '/' + hash;\n            var options = utils.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        report: function report(hash) {\n            var reason = arguments.length <= 1 || arguments[1] === undefined ? this.REASON_DOES_NOT_BELONG_ON_IMGUR : arguments[1];\n\n            if (!hash) {\n                throw new Error('hash must be specified');\n            }\n\n            if (typeof reason !== 'number') {\n                throw new Error('the reason must be an integer');\n            }\n\n            var path = this.path + '/' + hash + '/report';\n            var options = utils.buildOptions(this.apiUrl, path, 'post', { reason: reason });\n\n            return this.imgurAPICall(options);\n        },\n        _handleVote: function _handleVote(hash, voteType) {\n            if (!hash) {\n                throw new Error('hash must be specified');\n            }\n\n            var path = this.path + '/' + hash + '/vote/' + voteType;\n            var options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n        upvote: function upvote(hash) {\n            return this._handleVote(hash, 'up');\n        },\n        downvote: function downvote(hash) {\n            return this._handleVote(hash, 'down');\n        },\n        favorite: function favorite(hash, isAlbum) {\n            if (!hash) {\n                throw new Error('hash must be specified');\n            }\n\n            if (isAlbum === undefined || typeof isAlbum !== 'boolean') {\n                throw new Error('isAlbum with type boolean must be specified');\n            }\n\n            var postType = isAlbum ? 'album' : 'image';\n            //doesn't use gallery path because it could be a non gallery item\n            var path = postType + '/' + hash + '/favorite';\n            var options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n        comments: _endpoint(extend({}, postOptions, {\n            get: function get(hash) {\n                var sort = arguments.length <= 1 || arguments[1] === undefined ? 'best' : arguments[1];\n\n                var path = this.path + '/' + hash + '/comments/' + sort;\n                var options = utils.buildOptions(this.apiUrl, path, 'get');\n\n                return this.imgurAPICall(options);\n            }\n        }))\n    }));\n\n    var gallery = _endpoint({\n        path: 'gallery',\n        apiUrl: utils.API_URL + '/' + utils.API_VERSION,\n        get: function get() {\n            var section = arguments.length <= 0 || arguments[0] === undefined ? 'hot' : arguments[0];\n            var sort = arguments.length <= 1 || arguments[1] === undefined ? 'viral' : arguments[1];\n            var page = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n            var showViral = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n\n            var requestPath = this.path + '/' + section + '/' + sort + '/' + page + '?showViral=' + showViral;\n            var options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        post: galleryPostEndpoint\n    });\n\n    function galleryEndpoint(windowType, endpoint) {\n        return {\n            path: 'gallery/' + endpoint,\n            apiUrl: utils.API_URL + '/' + utils.API_VERSION,\n            get: function get(topic, sort, page) {\n                var window = arguments.length <= 3 || arguments[3] === undefined ? windowType : arguments[3];\n\n                var requestPath = this.path + '/' + topic + '/' + sort + '/' + window + '/' + page;\n                var options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n                return this.imgurAPICall(options);\n            },\n            post: galleryPostEndpoint\n        };\n    }\n\n    var WEEK = 'week';\n    var ALL = 'all';\n    var subreddit = _endpoint(galleryEndpoint(WEEK, 'r'));\n    var tag = _endpoint(galleryEndpoint(WEEK, 't'));\n    var search = _endpoint(galleryEndpoint(ALL, 'search'));\n    var topic = _endpoint(galleryEndpoint(ALL, 'topic'));\n\n    var commentEndpoint = _endpoint({\n        path: 'comment',\n        apiUrl: utils.API_URL + '/' + utils.API_VERSION,\n        REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n        get: function get(commentId) {\n            if (!commentId) {\n                throw new Error('commentId must be specified');\n            }\n\n            var path = this.path + '/' + commentId;\n            var options = utils.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        downvote: function downvote(commentId) {\n            if (!commentId) {\n                throw new Error('commentId must be specified');\n            }\n\n            var path = this.path + '/' + commentId + '/vote/down';\n            var options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n        upvote: function upvote(commentId) {\n            if (!commentId) {\n                throw new Error('commentId must be specified');\n            }\n\n            var path = this.path + '/' + commentId + '/vote/up';\n            var options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        },\n        report: function report(commentId) {\n            var reason = arguments.length <= 1 || arguments[1] === undefined ? this.REASON_DOES_NOT_BELONG_ON_IMGUR : arguments[1];\n\n            if (!commentId) {\n                throw new Error('commentId must be specified');\n            }\n\n            if (typeof reason !== 'number') {\n                throw new Error('the reason must be an integer');\n            }\n\n            var path = this.path + '/' + commentId + '/report';\n            var options = utils.buildOptions(this.apiUrl, path, 'post', { reason: reason });\n\n            return this.imgurAPICall(options);\n        },\n        deleteComment: function deleteComment(commentId) {\n            if (!commentId) {\n                throw new Error('commentId must be specified');\n            }\n\n            var path = this.path + '/' + commentId;\n            var options = utils.buildOptions(this.apiUrl, path, 'del');\n\n            return this.imgurAPICall(options);\n        },\n        submitComment: function submitComment(params) {\n            ['image_id', 'comment'].forEach(function (option) {\n                console.log(!params[option]);\n                if (!params[option]) {\n                    throw new Error(option + ' must be specified');\n                }\n            });\n\n            var options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n            return this.imgurAPICall(options);\n        },\n        submitReply: function submitReply(params) {\n            ['image_id', 'comment', 'parent_id'].forEach(function (option) {\n                if (!params[option]) {\n                    throw new Error(option + ' must be specified');\n                }\n            });\n\n            var options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var imgur = function imgur(clientKey, bearerKey) {\n        var setUtil = function setUtil(key, value) {\n            utils[key] = value;\n        };\n\n        var getUtil = function getUtil(key) {\n            return utils[key];\n        };\n\n        if (!clientKey) {\n            throw new Error('Client Key required to initialize imgur client');\n        }\n\n        setUtil('CLIENT_ID', clientKey);\n\n        if (bearerKey) {\n            setUtil('bearer', bearerKey);\n        }\n\n        return {\n            imgurAPICall: imgurAPICall,\n            CLIENT_ID: clientKey,\n            image: imageEndpoint,\n            album: albumEndpoint,\n            oauth2: oauth2Endpoint,\n            topics: topicsEndpoint,\n            gallery: gallery,\n            subreddit: subreddit,\n            tag: tag,\n            search: search,\n            topic: topic,\n            comment: commentEndpoint,\n            setUtil: setUtil,\n            getUtil: getUtil\n        };\n    };\n\n    return imgur;\n});\n//# sourceMappingURL=./imgur.js.map"],"sourceRoot":"/source/"}