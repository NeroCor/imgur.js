{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","request","_","this","utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","bearer","imgurAPICall","options","forEach","option","Error","authToken","body","BEARER","send","set","promise","endpoint","bind","imageEndpoint","get","hash","oauth2Endpoint","responseType","resType","queryString","join","refresh","refreshToken","clientSecret","topicsEndpoint","topicId","sort","undefined","arguments","page","requestPath","clientKey","setUtil","key","value","getUtil","image","oauth2","topics"],"mappings":"CAAC,SAAUA,EAAQC,GACI,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,+BAAgCA,QAAQ,WACtH,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,8BAA+B,UAAWJ,GAC/FD,EAAOO,MAAQN,EAAQD,EAAOQ,QAASR,EAAOS,IAChDC,KAAM,SAAUF,EAASC,GAAK,YAE5B,IAAIE,IACAC,QAAS,wBACTC,YAAa,IACbC,UAAW,GACXC,aAAc,SAACC,EAAQC,EAAMC,GACzB,OAASF,OAAAA,EAAQC,KAAAA,EAAMC,OAAAA,IAE3BC,OAAQ,IAGRC,EAAe,SAASC,IACvB,SAAU,SAAU,QAAQC,QAAQ,SAAAC,GACjC,IAAKF,EAAQE,GACT,KAAM,IAAIC,OAAK,GAAID,EAAM,uBAIjC,IAAIE,GAAS,aAAgBd,EAAMG,UAC7BY,EAAOL,EAAQK,QAMrB,OAJGf,GAAMgB,SACLF,EAAS,UAAad,EAAMgB,QAGzBnB,EAAQa,EAAQH,QAAO,GAAIG,EAAQL,OAAM,IAAIK,EAAQJ,MACvDW,KAAKF,GACLG,IAAI,gBAAiBJ,GACrBK,WAGLC,EAAW,SAASV,GAIpB,MAHAA,GAAQD,aAAeX,EAAEuB,KAAKZ,EAAcC,GAC5CA,EAAQL,OAASK,EAAQL,QAAM,GAAOL,EAAMC,QAAO,IAAID,EAAME,YAEtDQ,GAGPY,EAAgBF,GAChBd,KAAM,QACND,OAAM,GAAKL,EAAMC,QAAO,IAAID,EAAME,YAClCqB,IAAG,SAACC,GACA,GAAMd,GAAUV,EAAMI,aAAaL,KAAKM,OAAM,GAAKN,KAAKO,KAAI,IAAIkB,EAAQ,MAExE,OAAOzB,MAAKU,aAAaC,MAI7Be,EAAiBL,GACjBd,KAAM,SACND,OAAQL,EAAMC,QACdsB,IAAG,SAACG,GACA,GAAMC,GAAUD,GAAgB,QAC1BE,EAAc,KAAM,iBACLD,EAAO,aACX3B,EAAMG,WACzB0B,KAAK,KAEGvB,EAAI,GAAMP,KAAKO,KAAI,aAAasB,EAChClB,EAAUV,EAAMI,aAAaL,KAAKM,OAAQC,EAAM,MAEtD,OAAOP,MAAKU,aAAaC,IAE7BoB,QAAO,SAACC,EAAcC,GAClB,GAAMJ,GAAc,KAAM,iBACLG,EAAY,aAChB/B,EAAMG,UAAS,iBACX6B,EACjB,4BACFH,KAAK,KAEDvB,EAAI,GAAMP,KAAKO,KAAI,SAASsB,EAC5BlB,EAAUV,EAAMI,aAAaL,KAAKM,OAAQC,EAAM,OAEtD,OAAOP,MAAKU,aAAaC,MAI7BuB,EAAiBb,GACjBd,KAAM,SACND,OAAM,GAAKL,EAAMC,QAAO,IAAID,EAAME,YAClCqB,IAAG,SAACW,GCXA,GDWSC,GAAIC,SAAAC,UAAA,GAAC,QAAOA,UAAA,GAAEC,EAAIF,SAAAC,UAAA,GAAC,EAACA,UAAA,GACvBE,EAAW,GAAMxC,KAAKO,KAAI,IAAI4B,EAAO,IAAIC,EAAI,IAAIG,EACjD5B,EAAUV,EAAMI,aAAaL,KAAKM,OAAQkC,EAAa,MAE7D,OAAOxC,MAAKU,aAAaC,MAI7Bd,EAAQ,SAAS4C,GACjB,GAAIC,GAAU,SAASC,EAAKC,GACxB3C,EAAM0C,GAAOC,GAGbC,EAAU,SAASF,GACnB,MAAO1C,GAAM0C,GAGjB,KAAKF,EACD,KAAM,IAAI3B,OAAM,iDAKpB,OAFA4B,GAAQ,YAAaD,IAGjB/B,aAAAA,EACAN,UAAWqC,EACXK,MAAOvB,EACPwB,OAAQrB,EACRsB,OAAQd,EACRQ,QAAAA,EACAG,QAAAA,GAIR,OAAOhD","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent-bluebird-promise'), require('lodash')) :\n    typeof define === 'function' && define.amd ? define(['superagent-bluebird-promise', 'lodash'], factory) :\n    global.imgur = factory(global.request, global._)\n}(this, function (request, _) { 'use strict';\n\n    var utils = {\n        API_URL: 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: '',\n        buildOptions: (apiUrl, path, method) => {\n            return { apiUrl, path, method };\n        },\n        bearer: ''\n    };\n\n    var imgurAPICall = function(options) {\n        ['method', 'apiUrl', 'path'].forEach(option => {\n            if (!options[option]) {\n                throw new Error(`${option} must be specified`);\n            }\n        });\n\n        let authToken = `Client-ID ${utils.CLIENT_ID}`;\n        const body = options.body || {};\n\n        if(utils.BEARER) {\n            authToken = `Bearer ${utils.BEARER}`;\n        }\n\n        return request[options.method](`${options.apiUrl}/${options.path}`)\n            .send(body)\n            .set('Authorization', authToken)\n            .promise();\n    };\n\n    var endpoint = function(options) {\n        options.imgurAPICall = _.bind(imgurAPICall, options);\n        options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\n\n        return options;\n    }\n\n    var imageEndpoint = endpoint({\n        path: 'image',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n        get(hash) {\n            const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var oauth2Endpoint = endpoint({\n        path: 'oauth2',\n        apiUrl: utils.API_URL,\n        get(responseType) {\n            const resType = responseType || 'token';\n            const queryString = '?' + [\n                `response_type=${resType}`,\n                `client_id=${utils.CLIENT_ID}`\n        ].join('&');\n\n            const path = `${this.path}/authorize${queryString}`;\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurAPICall(options);\n        },\n        refresh(refreshToken, clientSecret) {\n            const queryString = '?' + [\n                `refresh_token=${refreshToken}`,\n                `client_id=${utils.CLIENT_ID}`,\n                `client_secret=${clientSecret}`,\n                'grant_type=refresh_token'\n            ].join('&');\n\n            const path = `${this.path}/token${queryString}`;\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var topicsEndpoint = endpoint({\n        path: 'topics',\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n        get(topicId, sort='viral', page=0) {\n            const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n            return this.imgurAPICall(options);\n        }\n    });\n\n    var imgur = function(clientKey) {\n        let setUtil = function(key, value) {\n            utils[key] = value;\n        };\n\n        let getUtil = function(key) {\n            return utils[key];\n        };\n\n        if (!clientKey) {\n            throw new Error('Client Key required to initialize imgur client');\n        }\n\n        setUtil('CLIENT_ID', clientKey);\n\n        return {\n            imgurAPICall,\n            CLIENT_ID: clientKey,\n            image: imageEndpoint,\n            oauth2: oauth2Endpoint,\n            topics: topicsEndpoint,\n            setUtil,\n            getUtil\n        };\n    }\n\n    return imgur;\n\n}));\n",null],"sourceRoot":"/source/"}