{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","request","this","extend","key","obj","i","result","arguments","length","hasOwnProperty","utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","body","undefined","bearer","imgurAPICall","options","forEach","option","Error","authToken","send","set","promise","endpoint","bind","imageEndpoint","get","hash","oauth2Endpoint","responseType","resType","queryString","join","refresh","refreshToken","clientSecret","topicsEndpoint","topicId","sort","page","requestPath","getDefaults","postOptions","galleryPostEndpoint","REASON_DOES_NOT_BELONG_ON_IMGUR","report","reason","_handleVote","voteType","upvote","downvote","favorite","isAlbum","postType","comments","galleryEndpoint","section","showViral","post","commentEndpoint","commentId","deleteComment","submitComment","params","console","log","submitReply","clientKey","bearerKey","setUtil","value","getUtil","image","oauth2","topics","gallery","comment"],"mappings":"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","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent-bluebird-promise')) :\n  typeof define === 'function' && define.amd ? define(['superagent-bluebird-promise'], factory) :\n  global.imgur = factory(global.request)\n}(this, function (request) { 'use strict';\n\n  var utils = {\n      API_URL: 'https://api.imgur.com',\n      API_VERSION: '3',\n      CLIENT_ID: '',\n      buildOptions: (apiUrl, path, method, body = {}) => {\n          return { apiUrl, path, method, body };\n      },\n      bearer: ''\n  };\n\n  var imgurAPICall = function(options) {\n      ['method', 'apiUrl', 'path', 'body'].forEach(option => {\n          if (!options[option]) {\n              throw new Error(`${option} must be specified`);\n          }\n      });\n\n      let authToken = `Client-ID ${utils.CLIENT_ID}`;\n\n      if(utils.bearer) {\n          authToken = `Bearer ${utils.bearer}`;\n      }\n\n      return request[options.method](`${options.apiUrl}/${options.path}`)\n          .send(options.body)\n          .set('Authorization', authToken)\n          .promise();\n  };\n\n  var endpoint = function(options) {\n      options.imgurAPICall = imgurAPICall.bind(options);\n      options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\n\n      return options;\n  }\n\n  var imageEndpoint = endpoint({\n      path: 'image',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(hash) {\n          const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var oauth2Endpoint = endpoint({\n      path: 'oauth2',\n      apiUrl: utils.API_URL,\n      get(responseType) {\n          const resType = responseType || 'token';\n          const queryString = '?' + [\n              `response_type=${resType}`,\n              `client_id=${utils.CLIENT_ID}`\n        ].join('&');\n\n          const path = `${this.path}/authorize${queryString}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      refresh(refreshToken, clientSecret) {\n          const queryString = '?' + [\n              `refresh_token=${refreshToken}`,\n              `client_id=${utils.CLIENT_ID}`,\n              `client_secret=${clientSecret}`,\n              'grant_type=refresh_token'\n          ].join('&');\n\n          const path = `${this.path}/token${queryString}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var topicsEndpoint = endpoint({\n      path: 'topics',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(topicId, sort='viral', page=0) {\n          const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      getDefaults() {\n          const requestPath = `${this.path}/defaults`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  const postOptions = {\n      path: 'gallery',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\n};\n\n  function extend() {\n    var key, obj, result = {}, i;\n    for (i = 0; i <= arguments.length; i++) {\n      obj = arguments[i];\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          result[key] = obj[key];\n        } else {\n        }\n      }\n    }\n    return result;\n  }\n\n  var galleryPostEndpoint = endpoint(extend({}, postOptions, {\n      REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n      get(hash) {\n          const path = `${this.path}/${hash}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      report(hash, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          if(typeof reason !== 'number') {\n              throw new Error('the reason must be an integer');\n          }\n\n          const path = `${this.path}/${hash}/report`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\n\n          return this.imgurAPICall(options);\n      },\n      _handleVote(hash, voteType) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          const path = `${this.path}/${hash}/vote/${voteType}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      upvote(hash) {\n          return this._handleVote(hash, 'up');\n      },\n      downvote(hash) {\n          return this._handleVote(hash, 'down');\n      },\n      favorite(hash, isAlbum) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          if(isAlbum === undefined || typeof(isAlbum) !== 'boolean') {\n              throw new Error('isAlbum with type boolean must be specified');\n          }\n\n          const postType = isAlbum ? 'album' : 'image';\n          //doesn't use gallery path because it could be a non gallery item\n          const path = `${postType}/${hash}/favorite`;\n          const options =  utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      comments: endpoint(extend({}, postOptions, {\n          get(hash, sort='best') {\n              const path = `${this.path}/${hash}/comments/${sort}`;\n              const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n              return this.imgurAPICall(options);\n          }\n      }))\n  }));\n\n  var galleryEndpoint = endpoint({\n      path: 'gallery',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(section='hot', sort='viral', page=0, showViral=true) {\n          const requestPath = `${this.path}/${section}/${sort}/${page}?showViral=${showViral}`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      post: galleryPostEndpoint\n  });\n\n  var commentEndpoint = endpoint({\n      path: 'comment',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n      get(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      downvote(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}/vote/down`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      upvote(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}/vote/up`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      report(commentId, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          if(typeof reason !== 'number') {\n              throw new Error('the reason must be an integer');\n          }\n\n          const path = `${this.path}/${commentId}/report`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\n\n          return this.imgurAPICall(options);\n      },\n      deleteComment(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'del');\n\n          return this.imgurAPICall(options);\n      },\n      submitComment(params) {\n          ['image_id', 'comment'].forEach(option => {\n              console.log(!params[option]);\n              if (!params[option]) {\n                  throw new Error(`${option} must be specified`);\n              }\n          });\n\n          const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n          return this.imgurAPICall(options);\n      },\n      submitReply(params) {\n          ['image_id', 'comment', 'parent_id'].forEach(option => {\n              if (!params[option]) {\n                  throw new Error(`${option} must be specified`);\n              }\n          });\n\n          const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var imgur = function(clientKey, bearerKey) {\n      let setUtil = function(key, value) {\n          utils[key] = value;\n      };\n\n      let getUtil = function(key) {\n          return utils[key];\n      };\n\n      if (!clientKey) {\n          throw new Error('Client Key required to initialize imgur client');\n      }\n\n      setUtil('CLIENT_ID', clientKey);\n\n      if(bearerKey) {\n          setUtil('bearer', bearerKey);\n      }\n\n      return {\n          imgurAPICall,\n          CLIENT_ID: clientKey,\n          image: imageEndpoint,\n          oauth2: oauth2Endpoint,\n          topics: topicsEndpoint,\n          gallery: galleryEndpoint,\n          comment: commentEndpoint,\n          setUtil,\n          getUtil\n      };\n  }\n\n  return imgur;\n\n}));\n",null],"sourceRoot":"/source/"}