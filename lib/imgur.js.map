{"version":3,"sources":["imgur.js"],"names":[],"mappings":"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","file":"imgur.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('superagent-bluebird-promise')) :\n    typeof define === 'function' && define.amd ? define(['lodash', 'superagent-bluebird-promise'], factory) :\n    global.imgur = factory(global._, global.request)\n}(this, function (_, request) { 'use strict';\n\n    let utils_js__utils = {\n        API_URL : 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: '',\n        buildOptions: function(apiUrl, path, method) {\n            return { apiUrl, path, method };\n        }\n    };\n\n    var utils_js = utils_js__utils;\n\n    let ImgurMethod__imgurMethod = function(options) {\n        ['method', 'apiUrl', 'path'].forEach(option => {\n\n            if(!options[option]) {\n                throw new Error(option + ' must be specified');\n            }\n        });\n        return request[options.method]([options.apiUrl, options.path].join('/'))\n            .set('Authorization', 'Client-ID ' + utils_js.CLIENT_ID)\n            .promise();\n    };\n\n    var ImgurMethod = ImgurMethod__imgurMethod;\n\n    let ImgurEndpoint__imgurEndpoint = options => {\n        options.imgurMethod = _.bind(ImgurMethod, options);\n        options.apiUrl = options.apiUrl || [utils_js.API_URL, utils_js.API_VERSION].join('/');\n        return options;\n    };\n\n    var ImgurEndpoint = ImgurEndpoint__imgurEndpoint;\n\n    var imageEndpoint = ImgurEndpoint({\n        path: 'image',\n        apiUrl: [utils_js.API_URL, utils_js.API_VERSION].join('/'),\n        get(hash) {\n            const options = utils_js.buildOptions(this.apiUrl, [this.path, hash].join('/'), 'get');\n            return this.imgurMethod(options);\n        }\n    });\n\n    var oauth2Endpoint = ImgurEndpoint({\n        path: 'oauth2',\n        apiUrl: utils_js.API_URL,\n        get(responseType) {\n            const resType = (responseType || 'token');\n            const queryString = '?' + [\n                `response_type=${resType}`,\n                `client_id=${utils_js.CLIENT_ID}`\n        ].join('&');\n\n            const path = [this.path, 'authorize'].join('/') + queryString;\n            const options = utils_js.buildOptions(this.apiUrl, path, 'get');\n\n            return this.imgurMethod(options);\n        },\n        refresh(refreshToken, clientSecret) {\n            const queryString = '?' + [\n                `refresh_token=${refreshToken}`,\n                `client_id=${utils_js.CLIENT_ID}`,\n                `client_secret=${clientSecret}`,\n                'grant_type=refresh_token'\n            ].join('&');\n\n            const path = [this.path, 'token'].join('/') + queryString;\n            const options = utils_js.buildOptions(this.apiUrl, path, 'post');\n\n            return this.imgurMethod(options);\n        }\n    });\n\n    let _imgur__Imgur = clientKey => {\n        if(!clientKey) { throw new Error('Client Key required to initialize imgur client');}\n        let endpoints = {\n            image : imageEndpoint,\n            oauth2: oauth2Endpoint\n        };\n\n        utils_js.CLIENT_ID = clientKey;\n\n        let imgur = {\n            ImgurEndpoint : ImgurEndpoint,\n            ImgurMethod : ImgurMethod\n        };\n\n        imgur.CLIENT_ID = clientKey;\n\n        _.forEach(endpoints, function(value, key) {\n            imgur[key] = value;\n        });\n\n        return imgur;\n    };\n\n    var _imgur = _imgur__Imgur;\n\n    return _imgur;\n\n}));\n"],"sourceRoot":"/source/"}