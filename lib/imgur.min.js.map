{"version":3,"sources":["/source/imgur.js"],"names":["global","factory","exports","module","require","define","amd","imgur","_","request","this","utils_js__utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","cb","utils_js","ImgurMethod__imgurMethod","options","forEach","option","Error","join","set","end","ImgurMethod","ImgurEndpoint__imgurEndpoint","imgurMethod","bind","ImgurEndpoint","imageEndpoint","get","hash","oauth2Endpoint","responseType","resType","queryString","refresh","refreshToken","clientSecret","_imgur__Imgur","clientKey","endpoints","image","oauth2","value","key","_imgur"],"mappings":"CAAC,SAAUA,EAAQC,GACI,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,UAAWA,QAAQ,eACjG,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,SAAU,cAAeJ,GAC9ED,EAAOO,MAAQN,EAAQD,EAAOQ,EAAGR,EAAOS,UAC1CC,KAAM,SAAUF,EAAGC,GAAW,YAE5B,IAAIE,IACAC,QAAU,wBACVC,YAAa,IACbC,UAAW,GACXC,aAAc,SAASC,EAAQC,EAAMC,EAAQC,GACzC,OAASH,OAAAA,EAAQC,KAAAA,EAAMC,OAAAA,EAAQC,GAAAA,KAInCC,EAAWT,EAEXU,EAA2B,SAASC,IACnC,KAAM,SAAU,SAAU,QAAQC,QAAQ,SAAAC,GAEvC,IAAIF,EAAQE,GACR,KAAM,IAAIC,OAAMD,EAAS,wBAGjCf,EAAQa,EAAQJ,SAASI,EAAQN,OAAQM,EAAQL,MAAMS,KAAK,MACvDC,IAAI,gBAAiB,aAAeP,EAASN,WAC7Cc,IAAIN,EAAQH,KAGjBU,EAAcR,EAEdS,EAA+B,SAASR,GAGxC,MAFAA,GAAQS,YAAcvB,EAAEwB,KAAKH,EAAaP,GAC1CA,EAAQN,OAASM,EAAQN,SAAWI,EAASR,QAASQ,EAASP,aAAaa,KAAK,KAC1EJ,GAGPW,EAAgBH,EAEhBI,EAAgBD,GAChBhB,KAAM,QACND,QAASI,EAASR,QAASQ,EAASP,aAAaa,KAAK,KACtDS,IAAK,SAAUC,EAAMjB,GACjB,GAAMG,GAAUF,EAASL,aAAaL,KAAKM,QAASN,KAAKO,KAAMmB,GAAMV,KAAK,KAAM,MAAOP,EACvF,OAAOT,MAAKqB,YAAYT,MAI5Be,EAAiBJ,GACjBhB,KAAM,SACND,OAAQI,EAASR,QACjBuB,IAAK,SAAUG,EAAcnB,GACzB,GAAMoB,GAAWD,GAAgB,QAC3BE,EAAc,KAAM,iBACLD,EAAO,aACXnB,EAASN,WAC5BY,KAAK,KAEGT,GAAQP,KAAKO,KAAM,aAAaS,KAAK,KAAOc,EAC5ClB,EAAUF,EAASL,aAAaL,KAAKM,OAAQC,EAAM,MAAOE,EAEhE,OAAOT,MAAKqB,YAAYT,IAE5BmB,QAAS,SAAUC,EAAcC,EAAcxB,GAC3C,GAAMqB,GAAc,KAAM,iBACLE,EAAY,aAChBtB,EAASN,UAAS,iBACd6B,EACjB,4BACFjB,KAAK,KAEDT,GAAQP,KAAKO,KAAM,SAASS,KAAK,KAAOc,EACxClB,EAAUF,EAASL,aAAaL,KAAKM,OAAQC,EAAM,OAAQE,EAEjE,OAAOT,MAAKqB,YAAYT,MAI5BsB,EAAgB,SAASC,GACzB,IAAIA,EAAa,KAAM,IAAIpB,OAAM,iDACjC,IAAIqB,IACAC,MAAQb,EACRc,OAAQX,EAGZjB,GAASN,UAAY+B,CAErB,IAAItC,IACA0B,cAAgBA,EAChBJ,YAAcA,EASlB,OANAtB,GAAMO,UAAY+B,EAElBrC,EAAEe,QAAQuB,EAAW,SAASG,EAAOC,GACjC3C,EAAM2C,GAAOD,IAGV1C,GAGP4C,EAASP,CAEb,OAAOO","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('superagent')) :\n    typeof define === 'function' && define.amd ? define(['lodash', 'superagent'], factory) :\n    global.imgur = factory(global._, global.request)\n}(this, function (_, request) { 'use strict';\n\n    let utils_js__utils = {\n        API_URL : 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: '',\n        buildOptions: function(apiUrl, path, method, cb) {\n            return { apiUrl, path, method, cb };\n        }\n    };\n\n    var utils_js = utils_js__utils;\n\n    let ImgurMethod__imgurMethod = function(options) {\n        ['cb', 'method', 'apiUrl', 'path'].forEach(option => {\n\n            if(!options[option]) {\n                throw new Error(option + ' must be specified');\n            }\n        });\n        request[options.method]([options.apiUrl, options.path].join('/'))\n            .set('Authorization', 'Client-ID ' + utils_js.CLIENT_ID)\n            .end(options.cb);\n    };\n\n    var ImgurMethod = ImgurMethod__imgurMethod;\n\n    let ImgurEndpoint__imgurEndpoint = function(options) {\n        options.imgurMethod = _.bind(ImgurMethod, options);\n        options.apiUrl = options.apiUrl || [utils_js.API_URL, utils_js.API_VERSION].join('/');\n        return options;\n    };\n\n    var ImgurEndpoint = ImgurEndpoint__imgurEndpoint;\n\n    var imageEndpoint = ImgurEndpoint({\n        path: 'image',\n        apiUrl: [utils_js.API_URL, utils_js.API_VERSION].join('/'),\n        get: function (hash, cb) {\n            const options = utils_js.buildOptions(this.apiUrl, [this.path, hash].join('/'), 'get', cb);\n            return this.imgurMethod(options);\n        }\n    });\n\n    var oauth2Endpoint = ImgurEndpoint({\n        path: 'oauth2',\n        apiUrl: utils_js.API_URL,\n        get: function (responseType, cb) {\n            const resType = (responseType || 'token');\n            const queryString = '?' + [\n                `response_type=${resType}`,\n                `client_id=${utils_js.CLIENT_ID}`\n        ].join('&');\n\n            const path = [this.path, 'authorize'].join('/') + queryString;\n            const options = utils_js.buildOptions(this.apiUrl, path, 'get', cb);\n\n            return this.imgurMethod(options);\n        },\n        refresh: function (refreshToken, clientSecret, cb) {\n            const queryString = '?' + [\n                `refresh_token=${refreshToken}`,\n                `client_id=${utils_js.CLIENT_ID}`,\n                `client_secret=${clientSecret}`,\n                'grant_type=refresh_token'\n            ].join('&');\n\n            const path = [this.path, 'token'].join('/') + queryString;\n            const options = utils_js.buildOptions(this.apiUrl, path, 'post', cb);\n\n            return this.imgurMethod(options);\n        }\n    });\n\n    let _imgur__Imgur = function(clientKey) {\n        if(!clientKey) { throw new Error('Client Key required to initialize imgur client');}\n        let endpoints = {\n            image : imageEndpoint,\n            oauth2: oauth2Endpoint\n        };\n\n        utils_js.CLIENT_ID = clientKey;\n\n        let imgur = {\n            ImgurEndpoint : ImgurEndpoint,\n            ImgurMethod : ImgurMethod\n        };\n\n        imgur.CLIENT_ID = clientKey;\n\n        _.forEach(endpoints, function(value, key) {\n            imgur[key] = value;\n        });\n\n        return imgur;\n    };\n\n    var _imgur = _imgur__Imgur;\n\n    return _imgur;\n\n}));\n"],"sourceRoot":"/source/"}