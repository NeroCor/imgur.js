{"version":3,"sources":["/source/imgur.js"],"names":["global","factory","exports","module","require","define","amd","imgur","_","request","this","utils_js__utils","API_URL","API_VERSION","CLIENT_ID","utils_js","imgurMethod","options","forEach","option","Error","method","apiUrl","path","join","set","end","cb","ImgurMethod","imgurEndpoint","bind","ImgurEndpoint","imageEndpoint","get","hash","oauth2Endpoint","responseType","queryString","Imgur","clientKey","endpoints","image","oauth2","value","key","_imgur"],"mappings":"CAAC,SAAUA,EAAQC,GACI,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,UAAWA,QAAQ,eACjG,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,SAAU,cAAeJ,GAC9ED,EAAOO,MAAQN,EAAQD,EAAOQ,EAAGR,EAAOS,UAC1CC,KAAM,SAAUF,EAAGC,GAAW,YAE5B,IAAIE,IACAC,QAAU,wBACVC,YAAa,IACbC,UAAW,IAGXC,EAAWJ,EAEXK,EAAc,SAASC,GACvBT,EAAEU,SAAS,KAAM,SAAU,SAAU,QAAS,SAASC,GACnD,IAAIF,EAAQE,GACR,KAAM,IAAIC,OAAMD,EAAS,wBAGjCV,EAAQQ,EAAQI,SAASJ,EAAQK,OAAQL,EAAQM,MAAMC,KAAK,MACvDC,IAAI,gBAAiB,aAAeV,EAASD,WAC7CY,IAAIT,EAAQU,KAGjBC,EAAcZ,EAEda,EAAgB,SAASZ,GAGzB,MAFAA,GAAQD,YAAcR,EAAEsB,KAAKF,EAAaX,GAC1CA,EAAQK,OAASL,EAAQK,SAAWP,EAASH,QAASG,EAASF,aAAaW,KAAK,KAC1EP,GAGPc,EAAgBF,EAEhBG,EAAgBD,GAChBR,KAAM,QACND,QAASP,EAASH,QAASG,EAASF,aAAaW,KAAK,KACtDS,IAAK,SAAUC,EAAMP,GACjB,MAAOjB,MAAKM,aACRO,MAAOb,KAAKa,KAAMW,GAAMV,KAAK,KAC7BG,GAAIA,EACJN,OAAQ,MACRC,OAAQZ,KAAKY,YAKrBa,EAAiBJ,GACjBR,KAAM,SACND,OAAQP,EAASH,QACjBqB,IAAK,SAAUG,EAAcT,GACzB,GAAIU,GAAc,KACd,kBAAoBD,GAAgB,SACpC,aAAerB,EAASD,WAC1BU,KAAK,KAEHP,GACAK,OAAQZ,KAAKY,OACbC,MAAOb,KAAKa,KAAM,aAAaC,KAAK,KAAOa,EAC3CV,GAAIA,EACJN,OAAQ,MAGZ,OAAOX,MAAKM,YAAYC,MAI5BqB,EAAQ,SAASC,GACjB,IAAIA,EAAa,KAAM,IAAInB,OAAM,iDACjC,IAAIoB,IACAC,MAAQT,EACRU,OAAQP,EAGZpB,GAASD,UAAYyB,CAErB,IAAIhC,IACAwB,cAAgBA,EAChBH,YAAcA,EASlB,OANArB,GAAMO,UAAYyB,EAElB/B,EAAEU,QAAQsB,EAAW,SAASG,EAAOC,GACjCrC,EAAMqC,GAAOD,IAGVpC,GAGPsC,EAASP,CAEb,OAAOO","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('superagent')) :\n    typeof define === 'function' && define.amd ? define(['lodash', 'superagent'], factory) :\n    global.imgur = factory(global._, global.request)\n}(this, function (_, request) { 'use strict';\n\n    let utils_js__utils = {\n        API_URL : 'https://api.imgur.com',\n        API_VERSION: '3',\n        CLIENT_ID: ''\n    };\n\n    var utils_js = utils_js__utils;\n\n    var imgurMethod = function(options) {\n        _.forEach(['cb', 'method', 'apiUrl', 'path'], function(option) {\n            if(!options[option]) {\n                throw new Error(option + ' must be specified');\n            }\n        });\n        request[options.method]([options.apiUrl, options.path].join('/'))\n            .set('Authorization', 'Client-ID ' + utils_js.CLIENT_ID)\n            .end(options.cb);\n    };\n\n    var ImgurMethod = imgurMethod;\n\n    var imgurEndpoint = function(options) {\n        options.imgurMethod = _.bind(ImgurMethod, options);\n        options.apiUrl = options.apiUrl || [utils_js.API_URL, utils_js.API_VERSION].join('/');\n        return options;\n    };\n\n    var ImgurEndpoint = imgurEndpoint;\n\n    var imageEndpoint = ImgurEndpoint({\n        path: 'image',\n        apiUrl: [utils_js.API_URL, utils_js.API_VERSION].join('/'),\n        get: function (hash, cb) {\n            return this.imgurMethod({\n                path: [this.path, hash].join('/'),\n                cb: cb,\n                method: 'get',\n                apiUrl: this.apiUrl\n            });\n        }\n    });\n\n    var oauth2Endpoint = ImgurEndpoint({\n        path: 'oauth2',\n        apiUrl: utils_js.API_URL,\n        get: function (responseType, cb) {\n            let queryString = '?' + [\n                'response_type=' + (responseType || 'token'),\n                'client_id=' + utils_js.CLIENT_ID\n            ].join('&');\n\n            let options = {\n                apiUrl: this.apiUrl,\n                path: [this.path, 'authorize'].join('/') + queryString,\n                cb: cb,\n                method: 'get'\n            };\n\n            return this.imgurMethod(options);\n        }\n    });\n\n    var Imgur = function(clientKey) {\n        if(!clientKey) { throw new Error('Client Key required to initialize imgur client');}\n        let endpoints = {\n            image : imageEndpoint,\n            oauth2: oauth2Endpoint\n        };\n\n        utils_js.CLIENT_ID = clientKey;\n\n        var imgur = {\n            ImgurEndpoint : ImgurEndpoint,\n            ImgurMethod : ImgurMethod\n        };\n\n        imgur.CLIENT_ID = clientKey;\n\n        _.forEach(endpoints, function(value, key) {\n            imgur[key] = value;\n        });\n\n        return imgur;\n    };\n\n    var _imgur = Imgur;\n\n    return _imgur;\n\n}));\n"],"sourceRoot":"/source/"}